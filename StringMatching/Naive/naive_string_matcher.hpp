/**
 * @brief  素朴な文字列照合アルゴリズムを扱います
 * @date   2016/03/31
 */



//****************************************
// インクルードガード
//****************************************

#ifndef __NAIVE_STRING_MATCHER_HPP__
#define __NAIVE_STRING_MATCHER_HPP__



//****************************************
// 必要なヘッダファイルのインクルード
//****************************************

#include "../StringMatching/string_matching.hpp"



//****************************************
// 関数の宣言
//****************************************

/**
 * @brief  素朴な文字列照合アルゴリズム
 *
 * @note   手続きNAIVE-STRING-MATCHERの実行にはΟ((n-m-1)m)時間かかり、この限界は最悪の場合には改良できない
 *         たとえば、テキスト文字列がa^n(n個のaからなる文字列)、パターンがa^mの場合を考える. n-m+1個の可能なシフトsの
 *         それぞれに対して、そのシフトが正当であることを確認するために、文字の比較をm回繰り返す必要がある
 *         したがって、最悪実行時間はΘ((n-m+1)m)となり、m = floor(n/2)ならば、Θ(n^2)である
 *         このアルゴリズムは前処理を必要とせず、NAIVE-STRING-MATCHERの実行時間は照合時間と一致する
 *
 * @param  string_t T テキストT
 * @param  string_t P パターンP
 */
void naive_string_matcher(string_t T, string_t P);



#endif  // end of __NAIVE_STRING_MATCHER_HPP__

